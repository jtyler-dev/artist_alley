generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// represents the state of a commission type's request queue
enum CommissionTypeRequestStatus {
  DRAFT     // user is still working on the request
  ACCEPTING // user is accepting requests of this type
  PAUSED    // user has paused requests of this type
  FULL      // user has reached the max number of requests for this type
  CLOSED    // user has closed requests of this type
}

enum CommissionStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_PROGRESS
  PAUSED_IN_PROGRESS
  AWAITING_APPROVAL
  REVISION_REQUESTED
  AWAITING_PAYMENT
  FINISHED
  ARCHIVED
}

enum FormFieldType {
  TEXT         
  TEXTAREA
  RADIO
  CHECKBOX
  SELECT
  MULTI_SELECT
  DATE
  NUMBER   
  FILE    
  TIME 
}

enum PublishedStatus {
  DRAFT
  PUBLISHED
}

enum UserRole {
  USER
  ADMIN
}


model User {
  // most fields are from better-auth
  id            String    @id @default(cuid())
  name          String
  displayName   String? // custom field: display name
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  username      String? // from username plugin

  // custom fields for the user
  isLocked      Boolean?  @default(false) @map("is_locked")
  bio           String?
  links         Json[]

  userInfo       UserInfo?

  // who the user is following / has following
  followers    Follower[]    @relation("UserFollowers")
  following    Follower[]    @relation("UserFollowing")

  // documents tha the user has created
  documents    Document[]
  forms        Form[]
  formFields   FormField[]

  // commission creation things
  commissionGroups CommissionGroup[]
  commissionTypes  CommissionType[]
  commissionAddOns CommissionAddOn[]

  // commission requests
  commissionList        CommissionRequest[]    @relation("commissionCommissioner")
  commissionRequested   CommissionRequest[]    @relation("commissionClient")
  commissionMessages    CommissionRequestMessage[]

  formResponses FormResponse[]

  // other things created by a user
  customReactions CustomReaction[]

  @@unique([email])
  @@unique([username])
  @@map("user")
}

model UserInfo {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])

  defaultCurrency String? @map("default_currency") @default("USD")
  defaultLanguage String? @map("default_language") @default("en")
  location        String?

  @@map("profile")
}

// from better-auth
model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}


// from better-auth
model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}


// from better-auth
model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Follower {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  followerId  String
  followingId String

  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("follower")
}

model Document {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // metadata for a document
  status      PublishedStatus @default(DRAFT)
  // name of the document
  name        String
  // description of the document 
  description String?

  // Content will be either 
  // content of the document will be either a string or a json object
  // if its a json object then it will be rich content
  content     String?

  @@map("document")
}

// Model that allows the user to create a group of commission types
// and group them together, this is just for organization / displaying
model CommissionGroup {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  name        String
  description String?

  CommissionTypes CommissionType[]

  @@map("commission_group")
}

model CommissionType {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // status of the commission type
  status      CommissionTypeRequestStatus @default(DRAFT)

  // who created the commission type
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // if its part of a group of commission types
  commissionGroupId String
  commissionGroup    CommissionGroup @relation(fields: [commissionGroupId], references: [id])

  // core data for a commission type
  // name of the commission type
  name        String

  // a brief description of the commission type
  description String?

  // details of the commission type, what the user will get if they request this commission
  details     String

  // price information
  price       Float
  currency    String

  // Options for the commission type
  // if the client is allowed to send messages to the commissioner after the commission is accepted
  allowMessages Boolean @default(false) @map("allow_messages")

  // ---- slots info ----
  // number of slots available for this commission type, if undefined then its unlimited
  numberOfSlots Int? @map("number_of_slots")

  // automatically reopen the commission type if the if the number of active requests is less than the number of slots
  reopenSlotQueue Boolean @default(false) @map("reopen_slot_queue")

  // if a client is allowed to join a waiting list if the commission type is full
  allowWaitList Boolean @default(false) @map("allow_wait_list")

  // allows user to set a date and time for when the commission type will open for requests and close for requests
  openAt DateTime? @map("open_at")
  closeAt DateTime? @map("close_at")

  formId      String?
  form        Form?     @relation(fields: [formId], references: [id])

  // additional add ons for this commission type
  commissionAddOns CommissionAddOn[]

  // requests for this commission type
  commissionRequests CommissionRequest[]

  @@map("commission_type")
}

model CommissionAddOn {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // metadata for a commission add on
  commissionTypes    CommissionType[]

  name        String
  description String?
  details     String
  price       Float?
  currency    String?

  @@map("commission_add_on")
}

model CommissionRequest {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // commission type that this request is for
  commissionTypeId String
  commissionType    CommissionType @relation(fields: [commissionTypeId], references: [id])

  // person who will do the commission
  commissioner   User   @relation("commissionCommissioner", fields: [commissionerId], references: [id])
  commissionerId String

  // person who requested the commission
  client   User   @relation("commissionClient", fields: [clientId], references: [id])
  clientId String

  // metadata for a commission request
  status      CommissionStatus @default(PENDING)
  estPrice    Float? @map("est_price")
  
  details     String

  // form responses for this commission request
  formResponses FormResponse[]

  messages   CommissionRequestMessage[]

  @@map("commission_request")
}

model CommissionRequestMessage {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // author of the message
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // commission request that this message is for
  commissionRequestId String
  commissionRequest    CommissionRequest @relation(fields: [commissionRequestId], references: [id])

  // when the message was seen by the user
  messageSeenAt DateTime? @map("message_seen_at")

  message     String

  // TODO: add attachments
  // TODO: add read status
  // TODO: add reactions
  // TODO: add reply to a message like in slack

  @@map("commission_request_message")
}

model Form {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // author of the form
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  // metadata for a form
  name        String
  description String?

  explanation String?

  // attached fields to the form
  formFields  FormField[]

  // commission types that this form is attached to
  commissionTypes CommissionType[]
}

model FormField {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  // author of the form field
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  formId      String
  form        Form     @relation(fields: [formId], references: [id])

  order       Int
  isRequired  Boolean @default(false) @map("is_required")
  question       String  // label or question for the form field ie: "What is your name?"
  description    String? // description of the form field
  type        FormFieldType
  options     String[] // options for the form field, only used for radio, checkbox, and multi-select

  responses  FormResponse[]
  @@map("form_field")
}

model FormResponse {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
 
  // form field that this response is for
  formFieldId  String @map("form_field_id")
  formField    FormField @relation(fields: [formFieldId], references: [id]) 

  // author of the response
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  commissionRequestId String
  commissionRequest    CommissionRequest @relation(fields: [commissionRequestId], references: [id])

  // response to the form field
  value       String
}


model CustomReaction {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // author of the reaction
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  name       String
  // TODO: add associated file
  // TODO: add who can use it?
}